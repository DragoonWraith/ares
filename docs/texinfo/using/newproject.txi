@c -*-texinfo-*-
@node New Project, Moving Around, Introduction, Top
@chapter New Project
@cindex New Project

In this section we describe how you can create and set up a new project.

@menu
* Creating a New Project::
* Asset Manager::
* Cell Manager::
* Dynamic Factory Manager::
@end menu

@node Creating a New Project, Asset Manager, New Project, New Project
@section Creating a New Project

The first thing you want to do after starting AresEd is creating a new project.
This is simply. Just use the @samp{New Project} menu item. This will create a
new empty project. After starting AresEd you will also end up in an empty project
so you don't have to use this menu in that case.

@node Asset Manager, Cell Manager, Creating a New Project, New Project
@section Asset Manager

The first thing you need to do after creating a new project is to load assets.
There are basically three kinds of assets at this moment:

@itemize @bullet
@item @samp{levels}:
Levels are typical world files as they can be created using Blender or 3dsMax.
For AresEd levels typically are rather simple as filling a level with objects is
typically done in AresEd itself. However it is of course possible to make a full
complex level in Blender and just import that directly. In that case it will
be harder to interact with the individual objects however. So most levels made
for AresEd contain just a surface, a skybox and a few lights.
@item @samp{objects}:
Objects are @samp{mesh factories} also exported by Blender or 3dsMax. They are typically
organized in @samp{libraries} (Crystal Space concept).
@item @samp{logic}:
Logic objects are entity templates, dynamic factories, quests, and other items related
to game logic and to defining the attributes of objects. These assets are generated by
AresEd themselves but you can reuse previously saved logic assets easily by adding them
as an asset in the asset manager.
@end itemize

When you fire up the asset manager you can add as many assets as you wish as long
as they don't conflict. If an asset was prepared for AresEd it may have a @samp{manifest.xml}
file in it describing the asset with a tag for the authors and license. The asset manager
will show this information when you select such an asset.

When picking assets for your project it is preferable to pick assets from the asset path
as then the project will remember the location of these assets using a relative location.
That makes it easier to move the project (and later the game) to different locations.

@node Cell Manager, Dynamic Factory Manager, Asset Manager, New Project
@section Cell Manager

If you load an asset that has one or more sectors then at least one cell will be
automatically created for you. So for worlds with only one sector you don't need to use
the cell manager. However, if you want to use more cells you can use the cell manager
to add extra cells. The cell manager will show all sectors that have been loaded already.
Sectors that have a cell associated with them will be marked cyan. You can use the @samp{+}
button to make a cell for that sector. Or you can type in a new name below and use @samp{+}
to create a new sector and cell.

Using the @samp{Set default} button you can switch to another cell in the editor.

@node Dynamic Factory Manager, , Cell Manager, New Project
@section Dynamic Factory Manager

In AresEd it is not possible to directly put objects in the world unless you defined a
dynamic factory for them. This can be done with the @samp{Manage Dynamic Factories} dialog.
This window has four major sections:

@itemize @bullet
@item @samp{Factory Tree}: top-left location.
This section shows all the dynamic factories as they are already created in the system.
You will notice that it already contains at least the @samp{Player} and @samp{Node} factories
as these are added by default in AresEd (more on these later). Using the right mouse button
on this tree you get a menu. Selecting an item in the tree will display a preview in the preview
section and also populate the other sections of this window.
@item @samp{Preview}: top-middle location.
This shows a preview of the currently selected object.
@item @samp{Attributes}: top-right location.
This section shows all user defined attributes for the given object. These attributes can be used
by your game logic for example.
@item @samp{Detail}: bottom location.
This is the main part of the dialog and shows information relevant for this object.
You can define the physics colliders here as well as any joints, pivots and bones your object
needs.
@end itemize

To define new dynamic factories you have to use the right mouse button on the desired
category in the factory tree (first level in the tree). Don't worry if the desired category
isn't there yet. Just create the object first in one of the existing categories and then you can
later move it to right category (with right mouse button on the object). Select @samp{New...}
to create a new dynamic factory. This will present you with a list of all mesh factories currently
in memory for which there is no dynamic factory defined yet.

After creating a dynamic factory you will most likely want to define one or more colliders. In the
(currently empty) list of colliders below use right mouse button and select @samp{New}. You can then
change the type of the collider (default is @samp{Box}) or change its attributes. In the preview
window you can see an outline of the current collider.

If you want objects created from this dynamic factory to be static by default (meaning they will
never move) then you can use the @samp{Static} checkbox.

If you don't want to use physics but plan on using an opcode based game instead then you can
use the @samp{Collider} checkbox to enable an opcode based collider.



