@c -*-texinfo-*-
@node Introduction, New Project, Top, Top
@chapter Introduction
@cindex Introduction

@menu
* What Is AresEd:: What Is Ares Editor
* Concepts::
* Assets and Resources::
@end menu

@node What Is AresEd, Concepts, Introduction, Introduction
@section What Is Ares Editor

Ares Editor is a 3D Game Creation Kit. What this means is that with AresEd
you will be able to construct full 3D games using assets that were generated
with Blender or another 3D modeller. Note that AresEd is *not* a modeller.
You will have to create 3D models in Blender or get them from another source.

With AresEd you can import assets (models) and place them in the 3D world as
you wish. This placement uses a full 3D preview as it would be shown in your
actual game and is fully physics based to allow for realistic
setups. In addition you will be able to edit game logic using a graphic tool
and preview your game from within the editor itself.

In the future it will also be possible to edit sound, special effects, NPC
behaviour and so on.

AresEd is work in progress. There are many missing features and likely many bugs.
Please report any bug you may find at
@uref{http://code.google.com/p/ares/issues/list}.

AresEd is based on Crystal Space for 3D rendering.
Crystal Space is a portable modular 3D SDK, including many components for 
building various applications and games.  For more information on Crystal 
Space please see the
@uref{http://www.crystalspace3d.org/,Crystal Space web page}.

AresEd is also based on Crystal Entity Layer (@sc{cel}) for game logic.
For more information on Crystal Entity Layer see the
@uref{http://cel.crystalspace3d.org/,Crystal Entity Layer} project page.

@node Concepts, Assets and Resources, What Is AresEd, Introduction
@section Concepts

Ares Editor is based on the dynamic world plugin from @sc{cel}. This plugin
is responsible for effecient managing of dynamic objects in a big world. An
object in AresEd is called a @samp{dynamic object}. When you place new objects
in the world you are creating new dynamic objects. So a dynamic object is the
most important concept you have to deal with when using AresEd.

Dynamic objects are not created out of nothing. To create a dynamic object you
need a dynamic factory. This is a blueprint that represents the shared data
of all dynamic objects of a certain type. A dynamic factory defines the Crystal
Space mesh that defines the visual representation of dynamic objects created
from this factory. It also defines certain characteristics like colliders for
physics. Setting up your dynamic factories is one of the first things you are
going to have to do when creating a new project in AresEd.

Game logic is defined using the @sc{cel} concept called @samp{entities}. An
@samp{entity} basically represents all necessary @samp{property classes} which
define how an object interacts with the world and how the player can interact
with this object. To associate this game logic with your dynamic objects you have
to create an @samp{entity template} which is again a blueprint for creating
@samp{entities}.

The dynamic world plugin divides the world in @samp{cells}. A cell is (currently)
one-by-one equivalent to a Crystal Space @samp{sector} but this is a limitation that
may go away in the future. AresEd fully supports editing different cells and allows
you to set up game logic to switch between cells at play time.

@node Assets and Resources, , Concepts, Introduction
@section Assets and Resources

An Ares project is made out of two major parts: a list of assets and the project
file itself defining the cells and objects in the cell. Assets are usually
archives or directories containing one or more managed and unmanaged resources.
Managed resources are resources that Ares itself knows about and can create and
edit. Unmanaged resources are resources that are generated externally.

Here are the managed resources we currently support:

@itemize @bullet
@item Dynamic Factories
A dynamic factory is a description of an object as it can be used in the world. From dynamic
factories you can create multiple dynamic objects. Associated with a dynamic factory you
have a @sc{mesh factory} which is an unmanaged resources that is typically created in a
3d modeller like Blender. Also associated with a dynamic factory is an entity template.
This is a managed resources containing a description of the game logic for objects created
from this factory.
@item Entity Templates
An entity template is a description of the game logic for objects. It contains property
classes which are individual game logic building blocks.
@item Quests
An entity template can be associated with one or more quests. A quest is a state machine
that can be used to 'program' your game logic.
@item Light Factories
A light factory is something from which light dynamic objects can be made.
@end itemize

In addition to the managed resources above AresEd can also indirectly work with the following unmanaged resources.
@itemize @bullet
@item Mesh Factories
A mesh factory is a description of a 3d object. From mesh factories Crystal Space can create
mesh objects which can be directly placed on screen. Mesh factories are not manipulated
directly in Ares but they are associated with Dynamic Factories. Mesh factories are
described in @sc{xml} and typically generated by a 3d modeller (like Blender in combination
with the blender2crystal plugin).
@item Textures and Materials
Textures are images that are wrapped on objects. It is also the responsible of the 3d
modeller to assign these.
@item Sectors
A sector is a Crystal Space concept. It is basically an area of space containing mesh
objects. Ares doesn't directly use sectors but couples them to cells.
@end itemize

