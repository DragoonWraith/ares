/*
The MIT License

Copyright (c) 2010 by Jorrit Tyberghein

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#ifndef __ARES_CURVEMESH_H__
#define __ARES_CURVEMESH_H__

#include "csutil/scf.h"

class csVector3;
struct iMeshWrapper;

struct iCurvedFactory : public virtual iBase
{
  SCF_INTERFACE(iCurvedFactory,0,0,1);

  virtual const char* GetName () const = 0;

  /**
   * Get the mesh factory.
   */
  virtual iMeshFactoryWrapper* GetFactory () = 0;

  /**
   * If this is called the mesh will be flattened to geometry
   * in the current sector.
   */
  virtual void FlattenToGround (iMeshWrapper* mesh) = 0;

  /**
   * Recreate the factory. This should be called the first time
   * after setting up the path and everytime after changing the path.
   * It will optionally make use of the information as given
   * by the FlattenToGround() in order to flatten the curve to the
   * ground.
   */
  virtual void GenerateFactory () = 0;

  /**
   * Setup the material to use for this curved factory.
   */
  virtual void SetMaterial (const char* materialName) = 0;

  /**
   * Setup the characteristics of the area that will be generated by this
   * curved mesh.
   * @param width is the width of the generated strip.
   * @param sideHeight is the height of the border left and right of the strip.
   */
  virtual void SetCharacteristics (float width, float sideHeight) = 0;

  /**
   * Get the width of the curve.
   */
  virtual float GetWidth () const = 0;

  /**
   * Get the side height.
   */
  virtual float GetSideHeight () const = 0;

  /**
   * Add a point to the curve.
   * Return the index of this point.
   */
  virtual size_t AddPoint (const csVector3& pos, const csVector3& front,
      const csVector3& up) = 0;

  /**
   * Change a point.
   */
  virtual void ChangePoint (size_t idx, const csVector3& pos, const csVector3& front,
      const csVector3& up) = 0;

  /**
   * Delete a point.
   */
  virtual void DeletePoint (size_t idx) = 0;

  /**
   * Get the number of points.
   */
  virtual size_t GetPointCount () const = 0;

  /**
   * Get the position of a given point.
   */
  virtual const csVector3& GetPosition (size_t idx) const = 0;

  /**
   * Get the front of a given point.
   */
  virtual const csVector3& GetFront (size_t idx) const = 0;

  /**
   * Get the up of a given point.
   */
  virtual const csVector3& GetUp (size_t idx) const = 0;
};

/**
 * A template for creating curved factories with default settings.
 */
struct iCurvedFactoryTemplate : public virtual iBase
{
  SCF_INTERFACE(iCurvedFactoryTemplate,0,0,1);

  virtual const char* GetName () const = 0;

  /**
   * Generic attribute system.
   */
  virtual void SetAttribute (const char* name, const char* value) = 0;

  /**
   * Get an attribute.
   */
  virtual const char* GetAttribute (const char* name) const = 0;

  /**
   * Setup the material to use for this curved factory.
   */
  virtual void SetMaterial (const char* materialName) = 0;

  /**
   * Setup the characteristics of the area that will be generated by this
   * curved mesh.
   * @param width is the width of the generated strip.
   * @param sideHeight is the height of the border left and right of the strip.
   */
  virtual void SetCharacteristics (float width, float sideHeight) = 0;

  /**
   * Add a point to the curve. These points will be used as defaults
   * for creating the factories.
   * Return the index of this point.
   */
  virtual size_t AddPoint (const csVector3& pos, const csVector3& front,
      const csVector3& up) = 0;
};

/**
 * Interface to the curved mesh plugin.
 */
struct iCurvedMeshCreator : public virtual iBase
{
  SCF_INTERFACE(iCurvedMeshCreator,0,0,1);

  //-----------------------------------------------------------------------------

  /**
   * Create a curved factory template.
   */
  virtual iCurvedFactoryTemplate* AddCurvedFactoryTemplate (const char* name) = 0;

  /**
   * Get the number of factory templaets.
   */
  virtual size_t GetCurvedFactoryTemplateCount () const = 0;
  /**
   * Get a factory template.
   */
  virtual iCurvedFactoryTemplate* GetCurvedFactoryTemplate (size_t idx) const = 0;

  //-----------------------------------------------------------------------------

  /**
   * Create a new curved mesh factory.
   */
  virtual iCurvedFactory* AddCurvedFactory (const char* name,
      const char* templatename) = 0;

  /**
   * Get the number of factories.
   */
  virtual size_t GetCurvedFactoryCount () const = 0;
  /**
   * Get a factory.
   */
  virtual iCurvedFactory* GetCurvedFactory (size_t idx) const = 0;
  /**
   * Get a factory by name.
   */
  virtual iCurvedFactory* GetCurvedFactory (const char* name) const = 0;

  /**
   * Delete all factories.
   */
  virtual void DeleteFactories () = 0;

  //-----------------------------------------------------------------------------

  /**
   * Save the curved mesh factories to XML.
   */
  virtual void Save (iDocumentNode* node) = 0;

  /**
   * Load the curved mesh factories from XML.
   * Return 0 on success or otherwise a string with the error.
   */
  virtual csRef<iString> Load (iDocumentNode* node) = 0;
};

#endif // __ARES_CURVEMESH_H__

